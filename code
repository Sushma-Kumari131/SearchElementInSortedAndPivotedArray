class Solution {

public static int getpivot(int arr[], int n) {
	int s=0;
	int e=n-1;
	int mid=s+(e-s)/2;
	while(s<e) {
		if(arr[mid]>=arr[0]) {
			s=mid+1;
		}
		else {
			e=mid;
		}
		mid=s+(e-s)/2;
	}
	return s;
}


public static int binarySearch(int[] arr,int start,int end,int key) {
	int s = start;
	int e = end;
	int mid =s+(e-s)/2;
	
	while (s<=e) {
		if(arr[mid]==key) {
			return mid;
		}
		if(key>arr[mid]) {
			s=mid+1;
		}
		else {
			e=mid-1;
		}
		mid=s+(e-s)/2;
	}
	return -1;
			
}



public int search(int[] nums, int target) {
    
    int n=nums.length;
    int pivot=getpivot(nums,n);
    
    if(target>=nums[pivot] && target<=nums[n-1]){
        return binarySearch(nums,pivot,n-1,target);
    }
    else{
        return binarySearch(nums,0,pivot-1,target);
    }
}
}
